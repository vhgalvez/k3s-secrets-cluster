# playbooks\04_generate_htpasswd_secrets.yml
- name: üîê Generar y aplicar Secrets htpasswd para servicios
  hosts: localhost
  become: false
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    htpasswd_services:
      - name: prometheus
        namespace: monitoring
        username: "{{ prometheus_auth_user }}"
        password: "{{ prometheus_auth_pass }}"
        secret_name: prometheus-basic-auth
      - name: grafana
        namespace: monitoring
        username: "{{ grafana_auth_user }}"
        password: "{{ grafana_auth_pass }}"
        secret_name: grafana-basic-auth
      - name: jenkins
        namespace: ci
        username: "{{ jenkins_auth_user }}"
        password: "{{ jenkins_auth_pass }}"
        secret_name: jenkins-basic-auth
      - name: argocd
        namespace: argocd
        username: "{{ argocd_auth_user }}"
        password: "{{ argocd_auth_pass }}"
        secret_name: argocd-basic-auth
      - name: longhorn
        namespace: longhorn-system
        username: "{{ longhorn_auth_user }}"
        password: "{{ longhorn_auth_pass }}"
        secret_name: longhorn-basic-auth

  tasks:
    - name: üîê Generar hash htpasswd
      delegate_to: localhost
      run_once: true
      command: >
        python3 -c "import crypt; print('{{ item.username }}:' + crypt.crypt('{{ item.password }}', crypt.mksalt(crypt.METHOD_MD5)))"
      register: htpasswd_tmp
      loop: "{{ htpasswd_services }}"
      loop_control:
        label: "{{ item.name }}"
      changed_when: false
      failed_when: htpasswd_tmp.rc != 0

    - name: üíæ Guardar hash como variable
      set_fact:
        "{{ 'htpasswd_' + item.name }}": "{{ htpasswd_tmp.results[loop.index0].stdout }}"
      loop: "{{ htpasswd_services }}"
      when: htpasswd_tmp.results[loop.index0].stdout is defined

    - name: üîê Crear Secret Kubernetes
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: "{{ item.namespace }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ item.secret_name }}"
          type: Opaque
          data:
            auth: "{{ lookup('vars', 'htpasswd_' + item.name) | b64encode }}"
      loop: "{{ htpasswd_services }}"
      loop_control:
        label: "{{ item.name }}"